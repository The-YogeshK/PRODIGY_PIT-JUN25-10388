import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import os

# ----------- Config -----------
DATA_PATH = "train.csv"
RANDOM_STATE = 42
TEST_RATIO = 0.2
# ------------------------------

def load_data(path):
    if not os.path.exists(path):
        print(f"‚ùå Couldn't find {path}.")
        exit()

    try:
        df = pd.read_csv(path)
        if df.empty:
            print("‚ö†Ô∏è File is empty!")
            exit()
        print(f"üì¶ Loaded {len(df)} rows")
        return df
    except Exception as e:
        print("‚ùå Error loading dataset:", e)
        exit()

def explore_data(df):
    print("\nüîç Dataset Overview:")
    print(df[["GrLivArea", "BedroomAbvGr", "FullBath", "SalePrice"]].describe())

    # Distribution plots
    fig, axes = plt.subplots(1, 3, figsize=(18, 4))
    sns.histplot(df["GrLivArea"], kde=True, ax=axes[0], color='skyblue')
    axes[0].set_title("Living Area Distribution")

    sns.countplot(x="BedroomAbvGr", data=df, ax=axes[1], palette='pastel')
    axes[1].set_title("Bedroom Count")

    sns.histplot(df["SalePrice"], kde=True, ax=axes[2], color='lightcoral')
    axes[2].set_title("Sale Price Distribution")
    plt.tight_layout()
    plt.show()

    # Correlation heatmap
    plt.figure(figsize=(6, 5))
    corr = df[["GrLivArea", "BedroomAbvGr", "FullBath", "SalePrice"]].corr()
    sns.heatmap(corr, annot=True, cmap="coolwarm")
    plt.title("Feature Correlation Heatmap")
    plt.show()

def preprocess(df):
    cols = ['GrLivArea', 'BedroomAbvGr', 'FullBath']
    X = df[cols].copy()
    y = df['SalePrice']
    X.fillna(X.mean(), inplace=True)
    return X, y

def train_model(X, y):
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=TEST_RATIO, random_state=RANDOM_STATE
    )

    model = LinearRegression()
    model.fit(X_train, y_train)

    print("‚úÖ Model trained.")
    y_pred = model.predict(X_test)

    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print(f"\nüìä Evaluation:")
    print(f"  - MSE  : {mse:.2f}")
    print(f"  - R¬≤   : {r2:.4f}")
    return model, X_test, y_test, y_pred

def visualize_results(model, X_test, y_test, y_pred):
    # Coefficients
    coeffs = pd.Series(model.coef_, index=X_test.columns)
    plt.figure(figsize=(6, 4))
    coeffs.plot(kind='barh', color='teal')
    plt.title("Model Coefficients")
    plt.xlabel("Weight")
    plt.tight_layout()
    plt.show()

    # Actual vs Predicted Scatter
    plt.figure(figsize=(6, 5))
    sns.scatterplot(x=y_test, y=y_pred, color='purple', alpha=0.6)
    sns.lineplot(x=y_test, y=y_test, color='red', linestyle='--', label="Ideal")
    plt.xlabel("Actual Price")
    plt.ylabel("Predicted Price")
    plt.title("Actual vs Predicted")
    plt.legend()
    plt.tight_layout()
    plt.show()

    # Residual plot
    residuals = y_test - y_pred
    plt.figure(figsize=(6, 4))
    sns.histplot(residuals, kde=True, color='salmon')
    plt.title("Residual (Error) Distribution")
    plt.xlabel("Prediction Error")
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    print("üè° Running House Price Prediction...\n")
    df = load_data(DATA_PATH)
    explore_data(df)
    X, y = preprocess(df)
    model, X_test, y_test, y_pred = train_model(X, y)
    visualize_results(model, X_test, y_test, y_pred)
